{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to belongtothenight docs","text":"<p>This is the homepage for all repository documentations. Switch to different pages at the top for individual documentations.</p>"},{"location":"#development-experience","title":"Development Experience","text":""},{"location":"#os","title":"OS","text":""},{"location":"#ideseditors","title":"IDEs/Editors","text":""},{"location":"#languagestools","title":"Languages/Tools","text":"<p>Source: Shield.io | Simple Icons</p>"},{"location":"#about-me","title":"About Me","text":"<ul> <li>\ud83d\udc4b Hi, I\u2019m @belongtothenight, currently studying in CYCU Electrical Engineering Master Degree.</li> <li>I have experience in drones, control systems, machine learning, big data, audio processing, analog circuit design, IoT, Real-Time Digital Signal Processing, FPGA, Computer Network, Chaos and Fractal, Quantum Computer, and more.</li> <li>I\u2019m currently learning/working on advance computer network (stream processing), IC layout, trusted platform module (TPM).</li> <li>I've love to collaborate on: Anything!</li> <li>Email: dachuan516@gmail.com</li> </ul>"},{"location":"#personal-repositories","title":"Personal Repositories","text":"No. Name / Link Description 1 ACN_Code Code for CYCUEE Advance computer network course. 2 adventofcode_s909 Personal used bash files. 3 autotools_init_setup C project autotools files. 4 bash_scripts Personal used bash files. 5 batch_scripts Personal used batch files. 6 BD_ML_Code Code for CYCUEE Big Data and Machine Learning course. 7 belongtothenight.github.io This website. 8 CF_Code Neumerical and Graphical demonstration of CYCUEE Chaos and Fractals course. 9 CN_Code Code for CYCUEE Computer Network course including encryption, DDoS, Ubuntu Server and more. 10 config-files Configuration files for my development environment. 11 CYCU-Grade-Exporter Web scraper to generate CYCU students grade related data. 12 Davinci-Resolve-Clip-Loader Davinci Resolve 17 automatic clip loader. 13 DIP_Code Code for CYCUEE Digital Image Processing course. 14 Drone_Motion_Control Simulating drone motion control with data generated from repo FRCNN_Related_Code. 15 File-Format-Converter Format converter function library. Converting between markdown, CSV, XML in bulk with GUI. 16 foo.bar_challange My personnal foo.bar answers. 17 FPGAA_Code Code for CYCUEE FPGA Application course. 18 FRCNN_Related_Code Multiple different resources and codes helping improving FRCNN development speed. 19 fuzzy_ctl_code Code for CYCUEE Fuzzy control course. 20 IoTP_Code Code for CYCUEE Internet of Things Practice course. Including Node.js, JS, HTML, CSS, ML, OpenData, BlockChain, Webserver, MCU, Hosting, and Database. 21 IQC_Code Code for CYCUEE Quantum Computing course. 22 Local-File-Backup A less complex version of backup software. Able to automate backup, archiving, unpacking process. 23 Minecraft-Scripts Scripts used to make Minecraft content creation easier. 24 NTC_Code Code for CYCUEE Number Theory and Cryptography course. Created a working website demonstrating calculation process of AES. 25 PDF_similarity_tester Automatic batch PDF similarity tester. 26 powershell_scripts Automatic batch PDF similarity tester. 27 PRML_Code Code for CYCUEE Pattern Recognition and Machine Learning course. 28 RTDSP_Code Code for CYCUEE Real-Time Digital Signal Processing course. 29 SMRBS-ESP32 Smart Meeting Record and Broadcast System implementation. 30 video_processing Batch video processing scripted with FFMPEG. 31 video_similarity_tester Automatic batch video similarity tester. 32 WPD-on-phone App service to process app-sent videos and performs BPM extraction and HRV analysis on locally hosted and tunneled servers. 33 YouTube-Video-Statistic-Gathering Read YouTube link from markdown files on the designated local folder, and organize statistics returned from YouTube."},{"location":"#organization-repositories","title":"Organization Repositories","text":"<p>I am a member of CYCU AIoT System Lab. This is a list of repositories that I have contributed to.</p> No. Name / Link Description 1 Microcontroller-Experiment Detail documentation about HT32 Firmware Library examples and experiments. 2 Microcontroller-Experiment-Code Closed source. 3 MusicGenreRecognition Closed source. 4 Medical-Waste-Classifier Closed source. 5 TPM_Sharing_Scheme Closed source."},{"location":"#academic-research","title":"Academic Research","text":"<ol> <li>[Conference] 2023 IEEE International Automatic Control Conference (CACS) - Automatic Visual Effect Adjustment System (IEEE Xplore/EngineeringVillage)</li> <li>[Conference] 2023 IEEE 5th Eurasia Conference on IOT, Communication and Engineering (ECICE) - Interactive System Based on Millimeter Wave And Wavelet Transform (IEEE Xplore/EngineeringVillage)</li> <li>[Journal] 2023 Sensors and Materials - Implementation of Interactive System with Milimeter Wave and Wavelet Transform (Sensors and Materials)</li> <li>[Conference] 2024 IEEE 10th International Conference on Applied System Innovation (ICASI) - Automatic Classification of Medical Waste (IEEE Xplore/EngineeringVillage)</li> <li>[Conference] 2024 IEEE 10th International Conference on Applied System Innovation (ICASI) - TPM Resource Sharing for Embedded System Network Security (IEEE Xplore/EngineeringVillage)</li> </ol>"},{"location":"#possible-plans","title":"Possible Plans","text":"<ol> <li>a website keeping record of newest technology and developing history. (tech frontier/advance tree?)</li> <li>host a database with content: minecraft pics, vids, mods, shaders, textures... language: MySQL, HTML?, JS?</li> <li>code a minecraft mod for filming, player path/environment logging.</li> <li>create more how-to websites.</li> </ol> <p>Updated Time: 2024-08-06</p> <p>Check website deployment action stats: https://github.com/belongtothenight/belongtothenight.github.io/actions</p>"},{"location":"DIP_Code_Reports/","title":"DIP Code Reports","text":"<p>Holds code for CYCUEE Digital Image Processing course. Go to source to see more.</p>"},{"location":"DIP_Code_Reports/#result-reports","title":"Result Reports","text":"<p>Each homework has its result edited, summarized, converted into PDF format stored in my github repository.</p>"},{"location":"DIP_Code_Reports/#hw1-mach-band-and-visual-illusion","title":"HW1 Mach Band, and Visual Illusion","text":"Hw1 <p>Draw functionlized Mach band, and visual color illusion. Head to report! Head to source code: draw3pic.m Head to source code: draw_mach_band.m</p>"},{"location":"DIP_Code_Reports/#hw2-halftoning","title":"HW2 Halftoning","text":"Hw2 <p>Halftoning grayscale and RGB image with different sizes dither matrixs. Head to report! Head to source code: draw_halftoning_gimg_22.m Head to source code: draw_halftoning_gimg_44.m Head to source code: draw_halftoning_gimg.m Head to source code: draw_halftoning_cimg.m </p>"},{"location":"DIP_Code_Reports/#hw3-point-processing","title":"HW3 Point Processing","text":"Hw3 <p>Use functionlized code to perform point processing, and perform simple calculation speed comparison. Head to report! Head to source code: gimg_arith_op_1.m Head to source code: gimg_ao1_value.m Head to source code: gimg_arith_op_2.m Head to source code: gimg_ao2_value.m Head to source code: cimg_arith_op_1.m Head to source code: cimg_arith_op_2.m Head to source code: gimg_hist_equal.m Head to source code: hist_equal.m </p>"},{"location":"DIP_Code_Reports/#hw4-spatial-filtering","title":"HW4 Spatial Filtering","text":"Hw4 <p>Use functionlized code to perform spatial filtering with specified three filters of different sizes. This is performed on both grayscale and RGB images. Head to report! Head to source code: spatial_filter.m Head to source code: spatial_filter_maskscaling.m Head to source code: spatial_filter_scalingtransform.m Head to source code: spatial_filter_scalingtransform1.m Head to source code: spatial_filter_clipping.m </p>"},{"location":"DIP_Code_Reports/#final","title":"Final","text":"Final <p>Report about Accurate Image Super-Resolution Using Very Deep Convolutional Networks, verifying and testing with custom image sets. Head to report! Head to source code repo directory! </p>"},{"location":"FPGA_Code_Reports/","title":"FPGA Code Reports","text":"<p>Holds code for CYCUEE FPGA Application course. Go to source to see more.</p> <p>Most of the code related to CPU structure are acquired from teaching materials of Prof. YU-PING LIAO.</p>"},{"location":"FPGA_Code_Reports/#result-reports","title":"Result Reports","text":"<p>Each homework has its result edited, summarized, converted into PDF format stored in my github repository.</p>"},{"location":"FPGA_Code_Reports/#hw1-environment-installation","title":"HW1 Environment Installation","text":"Hw1 <p>Setup Intel Quartus Prime Lite Edition development environment. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w1hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw2-implement-half-adder","title":"HW2 Implement Half Adder","text":"Hw2 <p>Code a half adder module and perform simulation. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w3hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw3-implement-4-bits-calculator","title":"HW3 Implement 4 bits calculator","text":"Hw3 <p>Code functionality of addition, subtraction, multiplication, and division. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w4hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw4-implement-controlled-counter","title":"HW4 Implement Controlled counter","text":"Hw4 <p>Code a counter triggered by external button and switches with debouncer functionality. Also another version triggered with internal clock. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w5hw.pdf</p>"},{"location":"FPGA_Code_Reports/#midterm-project","title":"Midterm Project","text":"Midterm <p>Code a 24-hour clock with a visual effect of laser destroyable numbers. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/mid.pdf</p>"},{"location":"FPGA_Code_Reports/#hw5-implement-data-register","title":"HW5 Implement data register","text":"Hw5 <p>Code a CPU data register with the guide of course teaching prof.. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w9hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw6-implement-more-cpu-structure-1","title":"HW6 Implement more CPU structure 1","text":"Hw6 <p>Code following CPU structure with the guide of course teaching prof.. 1. Read only memory. 2. Data direct system. 3. Write address control system. 4. Full data pipeline. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w10hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw7-implement-more-cpu-structure-2","title":"HW7 Implement more CPU structure 2","text":"Hw7 <p>Code stack, stack pointer, counter, controller execute instruction besides algorithmic instructions. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w11hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw8-use-cpu-instructions-to-perform-io-actions","title":"HW8 Use CPU instructions to perform I/O actions","text":"Hw8 <p>Code a frequency divider to observe affects of instructions. LEDs and 7-segment displays are used to display CPU output. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w12hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw9-use-signal-tap-logic-analyzer","title":"HW9 Use signal tap logic analyzer","text":"Hw9 <p>Use functionality of Signal Tap Logic Analyzer to analyze output of CPU with given instructions. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w13hw.pdf</p>"},{"location":"FPGA_Code_Reports/#hw10-use-state-machine-to-play-music","title":"HW10 Use State Machine to play music","text":"Hw10 <p>Use state machine to play pre-set song automatically. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/w14hw.pdf</p>"},{"location":"FPGA_Code_Reports/#final-project","title":"Final Project","text":"Final <p>Use different method to achieve the same result as midterm project. Head to report: https://github.com/belongtothenight/FPGAA_Code/blob/main/report/final.pdf</p>"},{"location":"IoTP_Code_Reports/","title":"IoTP Code Reports","text":"<p>Holds code for CYCUEE Internet of Things Practice course. Go to source to see more.</p>"},{"location":"IoTP_Code_Reports/#result-reports","title":"Result Reports","text":""},{"location":"IoTP_Code_Reports/#hw1-node-red-setup","title":"HW1 Node-RED Setup","text":"Hw1 <p>Install Node-RED and make the hello-world exapmle. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w1_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw2-node-red-dashboard-and-firebase-realtime-database","title":"HW2 Node-RED Dashboard and Firebase Realtime Database","text":"Hw2 <p>Playing around with Node-RED dashboard to display data and interact with Firebase Realtime Database. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w2_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw3-use-javascript-to-interact-with-firebase-realtime-database","title":"HW3 Use JavaScript to interact with Firebase Realtime Database","text":"Hw3 <p>Display random number on Node-RED dashboard, and PATCH/POST to Firebase Realtime Database. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w3_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw4-use-javascript-to-request-data-from-firebase-realtime-database","title":"HW4 Use JavaScript to request data from Firebase Realtime Database","text":"Hw4 <p>Request data from Firebase Realtime Database and setup crypto-js. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w4_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw5-hashing-crypto-chain","title":"HW5 Hashing, Crypto Chain","text":"Hw5 <p>Hashing use input, creating genesis crypto chain block and construct the full chain. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w5_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw6-local-voting-server","title":"HW6 Local voting server","text":"Hw6 <p>Create a voting system with HTML page on local machine, users can enter with given links. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w6_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw7-chat-room","title":"HW7 Chat room","text":"Hw7 <p>Chat room implementation with HTML page on local machine, users can enter with given links. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w7_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw8-request-data-from-api","title":"HW8 Request data from API","text":"Hw8 <p>Request data from HHINU2017 API and display the data of each request to dashboard. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w8_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw9-interact-with-iot-devices","title":"HW9 Interact with IoT devices","text":"Hw9 <p>Display data of MSA301 Accelerometer retrieved by ESP32 and send to Node-RED to display on dashboard. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w10_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw10-request-data-from-weather-api","title":"HW10 Request data from weather API","text":"Hw10 <p>Retrieve data from https://weatherstack.com API, extract interested data and display them on dashboard. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w11_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw11-use-tensorflowjs-to-make-pong-bot-1","title":"HW11 Use TensorFlowJS to make pong bot 1","text":"Hw11 <p>Make a pong bot with TensorFlowJS that we can train with our own gameplay. (code reading) Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w12_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw12-use-tensorflowjs-to-make-pong-bot-2","title":"HW12 Use TensorFlowJS to make pong bot 2","text":"Hw12 <p>Make a pong bot with TensorFlowJS that we can train with our own gameplay. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w13_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw13-hosting-pong-game-with-firebase","title":"HW13 Hosting pong game with Firebase","text":"Hw13 <p>Host pong game with Firebase hosting and setup OpenSSL. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w14_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw14-use-posenet-to-control-pong-game","title":"HW14 Use PoseNet to control pong game","text":"Hw14 <p>Control pong game paddle with PoseNet. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w15_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#hw15-use-web-speech-api","title":"HW15 Use Web Speech API","text":"Hw15 <p>Use speak-easy-synthesis to speak entered text. Head to report: https://github.com/belongtothenight/IoTP_Code/blob/main/report/w17_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#midterm-test","title":"Midterm Test","text":"Midterm <p>Test questions: https://github.com/belongtothenight/IoTP_Code/blob/main/report/%E7%89%A9%E8%81%AF%E7%B6%B2%E5%AF%A6%E5%8B%99MidtermExams.pdf Answer: https://github.com/belongtothenight/IoTP_Code/blob/main/report/midterm_10828241.pdf</p>"},{"location":"IoTP_Code_Reports/#final-project","title":"Final Project","text":"Final <p>MS Power Point presentation: https://github.com/belongtothenight/IoTP_Code/blob/main/report/Final.pdf Head to source: https://github.com/belongtothenight/IoTP_Code/tree/main/src/final Demo with Firebase hosting: https://iotp-fdde2.web.app/ (deprecated due to API changes)</p>"},{"location":"NTC_Code_Report/","title":"NTC Code Report","text":"<p>Holds code for CYCUEE Number Theory and Cryptography. Go to source to see more.</p>"},{"location":"NTC_Code_Report/#result-reports","title":"Result Reports","text":""},{"location":"NTC_Code_Report/#final-project","title":"Final Project","text":"Final <p>With no requirement of thirdparty libraries, created a Advance Encryption Standard (AES) demonstration website hosted with firebase. Including Key Expansion, AES Encryption, AES Decryption. The site also display the intermediate calculation result. Website: https://ntc-demo-296be.web.app/ Head to source: https://github.com/belongtothenight/NTC_Code Head to report: https://github.com/belongtothenight/NTC_Code/blob/main/report/report.pdf </p>"},{"location":"PRML_Code_Docs/","title":"PRML Code Docs","text":"<p>Holds code for CYCUEE Pattern Recognition and Machine Learning course. Go to source to see more.</p> <p>Heads to PRML Code Documentation for details.</p>"},{"location":"PRML_Code_Docs/#result-reports","title":"Result Reports","text":"<p>Each homework has its result edited, summarized, converted into PDF format stored in my github repository.</p>"},{"location":"PRML_Code_Docs/#hw1-beans-classification","title":"HW1 Beans Classification","text":"<p>\u5c07\u74f6\u5b50\u4e2d\u5f62\u72c0\u4e0d\u4e00\u7684\u7a40\u7269\u7d93\u904e\u591a\u6b21\u6416\u52d5\u5f8c\uff0c\u8a66\u5716\u5728\u4e0d\u770b\u984f\u8272\u7684\u60c5\u6cc1\u4e0b\u9032\u884c\u5206\u985e\uff0c\u5617\u8a66\u5982\u4f55\u80fd\u5920\u5206\u51fa\u5e7e\u7a2e\u3002</p> Hw1 <p>Generate figures for beans classification result. Head to report! Head to source code!</p>"},{"location":"PRML_Code_Docs/#hw2-pinky-knuckle-dimension-distribution","title":"HW2 Pinky Knuckle Dimension Distribution","text":"<p>\u91cf\u53d6\u5404 20 \u540d\u7537\u5973\u53d7\u6e2c\u8005\u5c0f\u62c7\u6307\u6307\u7bc0\u7684\u76f4\u5f91\u4e26\u9032\u884c\u6578\u64da\u5206\u5e03\u7684\u91cf\u6e2c\u3002</p> Hw2 <p>Pinky knuckle dimension statistical distribution visualization. Head to report! Head to source code!</p>"},{"location":"PRML_Code_Docs/#hw3-basic-shape-classification","title":"HW3 Basic Shape Classification","text":"<p>\u5c07\u6240\u6709\u5716\u5f62\u4f7f\u7528 Rough Set Theory (RST) \u4e2d\u7684\u4e0d\u8b8a\u7279\u5fb5\uff1a\u65cb\u8f49\u3001\u7e2e\u653e\u3001\u5e73\u79fb\uff0c\u4f86\u5206\u985e\u53ca\u8fa8\u8b58\u5716\u5f62\u3002</p> Hw3 <p>2 dimensional shape classification. Head to report! Head to source code!</p>"},{"location":"PRML_Code_Docs/#hw4-basic-demonstration-for-supervised-learning-algorithm","title":"HW4 Basic demonstration for Supervised Learning Algorithm","text":"<p>\u4eff\u6548 Layer Machines \u7684\u904b\u4f5c\u539f\u7406\u4ee5\u66f4\u7c21\u55ae\u7684\u65b9\u5f0f\u5448\u73fe\u5176\u5728\u6301\u7e8c\u4e0d\u65b7\u66f4\u52d5 Weight \u5f8c\u671f\u671b\u80fd\u5920\u66f4\u8cbc\u8fd1\u6700\u4f73\u89e3\u3002</p> Hw4 <p>Basic demonstration for Supervised Learning Algorithm with realtime data visual displaying and config file to set without re-compiling the program. Head to report! Head to source code!</p>"},{"location":"RTDSP_Code_Reports/","title":"RTDSP Code Reports","text":"<p>Holds code for CYCUEE Real-Time Digital Signal Processing course. Go to source to see more.</p>"},{"location":"RTDSP_Code_Reports/#result-reports","title":"Result Reports","text":"<p>Each homework has its result edited, summarized, converted into PDF format stored in my github repository.</p>"},{"location":"RTDSP_Code_Reports/#hw1-basics","title":"HW1 Basics","text":"Hw1 <p>Answer questions and use MatLab to simulate low sampling rate. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230220HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw2-basics","title":"HW2 Basics","text":"Hw2 <p>Answer more questions. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230306HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw3-basics","title":"HW3 Basics","text":"Hw3 <p>Answer more questions, and implement MA filter in MatLab. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230320HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw4-snr","title":"HW4 SNR","text":"Hw4 <p>Answer more questions, and generate sinewave corrupted by zero-mean, unit-variance white noise with SNR=0dB. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230327HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw5-snr","title":"HW5 SNR","text":"Hw5 <p>Answer more questions, use generated sinewave which is corrupted with noise and measure its SNR value. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230331HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw6-filters","title":"HW6 Filters","text":"Hw6 <p>Implement Butterworth, Chebyshev Type II, Elliptic, and Bessel filter. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230424HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw7-dft","title":"HW7 DFT","text":"Hw7 <p>Implement DFT with different parameters. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230501HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw8-lms","title":"HW8 LMS","text":"Hw8 <p>Answer questions about LMS and ANC. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230508HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#hw9-lms-and-nlms","title":"HW9 LMS and NLMS","text":"Hw9 <p>Implement LMS and NLMS with MatLab. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/20230521HW.pdf </p>"},{"location":"RTDSP_Code_Reports/#final","title":"Final","text":"Final <p>Report about Environmental Sound Classification (ESC) written at the link https://github.com/ohinitoffa/esc/tree/main. Head to report: https://github.com/belongtothenight/RTDSP_Code/blob/main/report/final.pdf </p>"},{"location":"HOW_TO/","title":"How-To Guides","text":"<p>This is a summary of how-to guides shown down below.</p>"},{"location":"HOW_TO/#paper","title":"Paper","text":"No Page Update Record 1 how_to_PAPER-create_standard_reference_with_bibtex 2024-04-08 2 how_to_PAPER-summarize_paper_for_easier_understanding - 3 how_to_PAPER-outline_paper_for_better_writing_experience -"},{"location":"HOW_TO/#github","title":"GitHub","text":"No Page Update Record 1 how_to_GITHUB-use_GitHub - 2 how_to_GITHUB-store_and_update_all_repo_locally -"},{"location":"HOW_TO/#linux","title":"Linux","text":"No Page Update Record 1 how_to_LINUX-auto_launch_program_on_boot 2024-04-04"},{"location":"HOW_TO/#website","title":"Website","text":"No Page Update Record 1 how_to_WEBSITE-create_documentation_webpage_with_mkdocs 2024-03-31"},{"location":"HOW_TO/#bash","title":"Bash","text":"No Page Update Record 1 how_to_BASH-open_terminal_with_CLI 2024-04-04 2 how_to_BASH-parse_CLI_input_arguments - 3 how_to_BASH-parse_config_file_as_variable -"},{"location":"HOW_TO/#python","title":"Python","text":"No Page Update Record 1 how_to_PYTHON-multiprocessing_to_parallel_and_speedup 2024-04-14 2 how_to_PYTHON-parse_CLI_input_arguments - 3 how_to_PYTHON-code_formating_for_developing_experience -"},{"location":"HOW_TO/#c","title":"C","text":"No Page Update Record 1 how_to_C-use_autotools_to_manage_project 2024-05-12 2 how_to_C-parse_CLI_input_arguments -"},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/","title":"Open Terminal with CLI","text":"<p>This guide will show you how to open terminal with CLI when you are scripting in desktop environment.</p>"},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/#problem","title":"Problem","text":"<p>You are doing bash scripting, and you want to open terminal with CLI in the script.</p>"},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/#solution","title":"Solution","text":""},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/#step-1-check-your-terminal-emulator","title":"Step 1: Check your terminal emulator","text":"<p>In Ubuntu, the default option is <code>gnome-terminal</code>; in Raspbian, the default option is <code>lxterminal</code>. Find out the terminal emulator you are using.</p>"},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/#step-2-define-command-to-execute-after-main-command","title":"Step 2: Define command to execute after main command","text":"<p>In most cases, you would like the newly opened terminal to stay open after the main command is executed.</p> <ol> <li>Keep interact with the terminal after the main command is executed:     <pre><code>terminate_command=\"bash\"\n</code></pre></li> <li>Keep the terminal open for a certain amount of time:     <pre><code>terminate_command=\"sleep 10\"\n</code></pre></li> <li>Keep the terminal open forever:     <pre><code>terminate_command=\"sleep infinity\"\n</code></pre></li> </ol>"},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/#step-3-open-terminal-with-cli","title":"Step 3: Open terminal with CLI","text":"gnome-terminal<pre><code>gnome-terminal -t \"Terminal Title\" --active -- bash -c \"echo \\\"Hello World\\\"; $terminate_command\"\n</code></pre> <p>For <code>gnome-terminal</code>, you can check the function implementation at my GitHub</p> lxterminal<pre><code>lxterminal -t \"Terminal Title\" -e \"echo \\\"Hello World\\\"; $terminate_command\"\n</code></pre> <p>For <code>lxterminal</code>, you can check the function implementation at my GitHub</p>"},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/#reference","title":"Reference","text":""},{"location":"HOW_TO/how_to_BASH-open_terminal_with_CLI/#error-correction","title":"Error Correction","text":"<p>If you find any mistakes in the document, please create an Issue or a Pull request or leave a message in Discussions or send me a mail directly with the mail icon at the bottom right. Thank you!</p>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/","title":"Use Autotools to Manage Project","text":"<p>This guide will show you how to use Autotools to create makefiles and manage your project.</p>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#problem","title":"Problem","text":"<p>When developing C or C++(CXX) projects, often times it is necessary to worry about how the program is built, how to support the same code base for different platforms and OS, how to make sure all the requirements and dependencies are met, and how everything is installed.</p>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#background","title":"Background","text":"<p>Compilers like GCC, G++, clang are used to compile C and C++ code. However, when multiple files presents in a project, it can be troublesome to type in all of the files and flags for each and every files. With the help of Make, developers can code up how project should be compiled, enabling more stable reproducibility. Most personal project should only requires this level of scripting to manage the entire code base. If on the other hand, you have more requirements like what I mentioned in the Problem section, tools like Autotools and CMake can greatly help with managing complex project and achieve even more stable reproducibility.</p>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#solution","title":"Solution","text":""},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#step-1-install-requirements","title":"Step 1: Install Requirements","text":"<p>Install git, make, libtool, and automake.</p> Debian OS<pre><code>sudo apt update\nsudo apt install -y git make libtool automake\n</code></pre> <p>If newer versions are needed, you can install them from source.</p>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#step-2-create-project","title":"Step 2: Create Project","text":"<p>Create a new project directory like the following. It is recommended to use git to perform version control along side with the project.</p> Debian OS<pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Makefile.am\n\u251c\u2500\u2500 configure.ac\n\u251c\u2500\u2500 m4\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 .keepdir\n\u251c\u2500\u2500 readme.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 Makefile.am\n    \u251c\u2500\u2500 lib.c\n    \u251c\u2500\u2500 lib.h\n    \u2514\u2500\u2500 main.c\n\n2 directories, 9 files\n</code></pre> <p>One <code>configure.ac</code> and <code>Makefile.am</code> file is required at the root of the project. The <code>./configure.ac</code> file is responsible for finding required dependencies and generating <code>./configure</code> script, which generate makefiles for this project. <code>./Makefile.am</code> file is responsible for setting up project structure, sort of like <code>Makefile</code>. Each subdirectory containing source code requires coreesponding Makefile.am like <code>./src/Makefile.am</code>. <code>./m4</code> directory is responsible to handle generated intermediate auxiliary files.</p>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#step-3-write-configureac","title":"Step 3: Write <code>configure.ac</code>","text":"<p>Following is a sample of <code>configure.ac</code> file. You can modify it to fit your project.</p> configure.ac<pre><code>AC_PREREQ([2.71])\nAC_INIT([hello], [0.0.1], [dachuan516@gmail.com])\nAC_CONFIG_AUX_DIR([build-aux])\nAM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects]) # Display all errors, treat warning as error, following minimum GNU policy, enable automake to look into subdirectories\nAC_CONFIG_SRCDIR([src])\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_MACRO_DIR([m4])\nAM_PROG_AR\n\n# Checks for programs.\nAC_PROG_CC\nLT_INIT([disable-static])\n\n# Checks for libraries.\n\n# Checks for header files.\nAC_CHECK_HEADERS([arpa/inet.h stdio.h stdlib.h string.h unistd.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_SIZE_T\nAC_TYPE_INT8_T\nAC_TYPE_INT16_T\nAC_TYPE_INT32_T\nAC_TYPE_INT64_T\nAC_TYPE_UINT8_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\n\n# Checks for library functions.\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\nAC_CHECK_FUNCS([gethostbyname memmove memset socket strerror strtoul])\n\nAC_CONFIG_FILES([Makefile\n                 src/Makefile])\nAC_OUTPUT\n</code></pre> <ul> <li><code>Line 2</code>: Set basic information for the project.</li> <li><code>Line 3</code>: Set auxiliary directory to hold generated files.</li> <li><code>Line 4</code>: Set automake flags. This is not GCC flags.</li> <li><code>Line 5</code>: Set source directory. Can have multiple source directories.</li> <li><code>Line 7</code>: Set macro holding directory.</li> <li><code>Line 12</code>: Set libtool settings.</li> <li><code>Line 15</code>: Check for libraries. Not used in this example.</li> <li><code>Line 17</code>: Check for header files.</li> <li><code>Line 20-28</code>: Check for typedefs, structures, and compiler characteristics.</li> <li><code>Line 31-33</code>: Check for library functions.</li> <li><code>Line 35-36</code>: Write out all of the <code>Makefile.am</code> files.</li> </ul>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#step-4-write-makefileam","title":"Step 4: Write <code>Makefile.am</code>","text":"configure.ac<pre><code>SUBDIRS = src\n\nEXTRA_DIST = m4/.keepdir\nACLOCAL_AMFLAGS = -I m4 --install\n\nclean-local:\n    rm -rf \\\n        autoscan.log \\\n        aclocal.m4 \\\n        autom4te.cache \\\n        build-aux \\\n        config.h \\\n        config.h.in \\\n        config.h.in~ \\\n        config.log \\\n        config.status \\\n        configure \\\n        libtool \\\n        m4/* \\\n        .deps \\\n        Makefile.in \\\n        Makefile \\\n        stamp-h1 \\\n        src/*.in \\\n        src/*.o \\\n        src/*.la \\\n        src/*.lo \\\n        src/main \\\n        src/.deps \\\n        src/.libs \\\n        src/Makefile\n    mkdir -p m4\n    touch m4/.keepdir\n    rm -rf \\\n        configure~ \\\n        *.tar.gz\n</code></pre> <ul> <li><code>Line 1</code>: Set subdirectories to look into.</li> <li><code>Line 4</code>: Set extra flags for aclocal.</li> <li><code>Line 6-36</code>: Clean up all the generated files. This extends the <code>make clean</code> command. Really helpful when you want to clean up everything but the source code.</li> </ul>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#step-5-write-srcmakefileam","title":"Step 5: Write <code>./src/Makefile.am</code>","text":"configure.ac<pre><code>project = autotools_init_setup_type2\ncommon_cflag = -Wno-implicit-function-declaration -Wextra -Wall -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wcast-align -Wstrict-prototypes -Wstrict-overflow=5 -Wwrite-strings -Waggregate-return -Wcast-qual -Wswitch-default -Wswitch-enum -Wconversion -Wunreachable-code -Wformat=2 -O3\ncommon_cxxflag = -Wextra -Wall -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wcast-align -Wstrict-overflow=5 -Wwrite-strings -Waggregate-return -Wcast-qual -Wswitch-default -Wswitch-enum -Wconversion -Wunreachable-code -Wformat=2 -O3\n\n# ====================================\n# install directory of public:\n# - plugins         (.so, .a, .la)\n# - libtool library (.so, .a, .la)\n# - header          (.h)\n# - binary\n# NOTE: comment out if not needed of individual install\n# NOTE: created directory won't be removed by uninstall\n# NOTE: header ladir need to use the library name as prefix\n# ====================================\n#plugindir  = $(prefix)/lib/${project}\nlibdir      = $(prefix)/lib/${project}\nlib_ladir   = $(prefix)/include/${project}\nbindir      = $(prefix)/bin/${project}\n\n# ====================================\n# add library to install as plugin\n# NOTE: can't be used with plugin_LTLIBRARIES\n# ====================================\nlib_LTLIBRARIES = lib.la\n# lib_LTLIBRARIES += lib2.la\n\n# ====================================\n# add library to install as libtool library\n# NOTE: can't be used with lib_LTLIBRARIES\n# ====================================\n# plugin_LTLIBRARIES = lib.la\n# plugin_LTLIBRARIES += lib2.la\n\n# ====================================\n# add source to build library\n# NOTE: need to use the library name as prefix\n# ====================================\nlib_la_SOURCES = lib.c\n# lib_la_SOURCES += lib2.c\nlib_la_HEADERS = lib.h\n# lib_la_HEADERS += lib2.h\nlib_la_CFLAGS = $(common_cflag)\n# lib_la_CFLAGS += -I$(lib_ladir)\n\n# ====================================\n# add executable to build\n# ====================================\nbin_PROGRAMS = main\n# bin_PROGRAMS += main2\n\n# ====================================\n# add source to build executable\n# NOTE: need to use the executable name as prefix\n# ====================================\nmain_SOURCES = main.c\nmain_CFLAGS = $(common_cflag)\nmain_LDADD = lib.la\n</code></pre> <ul> <li><code>Line 1-3</code>: Set variables for later use.</li> <li><code>Line 15-18</code>: Set install directories for binaries, libraries, headers, and plugins.</li> <li><code>Line 24</code>: Create a library to build named <code>lib</code>. If you have multiple libraries, you can add them like <code>Line 25</code>.</li> <li><code>Line 38-43</code>: Add sources, headers, and compiling flags for the library. Their names should be prefixed with the library name.</li> <li><code>Line 48</code>: Create an executable to build named <code>main</code>. If you have multiple executables, you can add them like <code>Line 49</code>.</li> <li><code>Line 55-57</code>: Add sources, compiling flags, and libraries to link for the executable. Their names should be prefixed with the executable name.</li> </ul>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#step-6-build-project","title":"Step 6: Build Project","text":"<p>Execute the following commands to build the project.</p> <pre><code>autoreconf -iv\n./configure\nmake\nsudo make install\n</code></pre> <p><code>Line 1</code> can actually be split into multiple steps, but for simplicity, this command is used instead. Also, if you prefer to do with multiple steps, people usually code them into a script <code>./bootstrap.sh</code> and execute it instead.</p> <p>The world of autotools can be a lot more complex than this. However, the following example should give you a good start.</p> <ul> <li>The entire project to start with can be found in https://github.com/belongtothenight/autotools_init_setup/tree/main.</li> <li>More complex project based on this can be found in https://github.com/belongtothenight/ACN_Code/tree/main/hw5_c_trace_analyze.</li> </ul> <p>Open-sourced and mature projects managed by autotools:</p> <ul> <li>https://github.com/LibtraceTeam/wandio</li> <li>https://github.com/LibtraceTeam/libtrace</li> <li>https://github.com/kgoldman/ibmtss</li> <li>https://github.com/tpm2-software/tpm2-tss</li> </ul>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#reference","title":"Reference","text":"<ol> <li>How to use autotools (automake, autoconf, aclocal, autoheader) by Daniel Persson</li> <li>Introduction to the Autotools, part 1 by David A. Wheeler</li> </ol>"},{"location":"HOW_TO/how_to_C-use_autotools_to_manage_project/#error-correction","title":"Error Correction","text":"<p>If you find any mistakes in the document, please create an Issue or a Pull request or leave a message in Discussions or send me a mail directly with the mail icon at the bottom right. Thank you!</p>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/","title":"Auto Launch Program on Boot","text":"<p>This guide will show you how to launch a program on boot in a Linux system using systemd, routine execution is also covered.</p>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#problem","title":"Problem","text":"<p>You want to automatically launch a program whenever your linux machine boots up.</p>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#background","title":"Background","text":"<p>In linux system boot sequence, BIOS/UEFI gets loaded and executed, later it triggers the boot loader (ex: GRUB) which loaded the OS. Once the OS is loaded, it execute a service called \"systemd\" [1]. This service later starts all of the background processes necessary for modern day OS. In our case, we can use the ability to launch processes/services powered by systemd to achive our goal.</p> <p></p> <p>Figure 1: Linux Boot Process [2]</p>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#solution-1-systemd","title":"Solution 1: systemd","text":""},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#step-1-create-a-service-file","title":"Step 1: Create a Service File","text":"<p>In this step, let's create a service file that systemd can use to launch our program. After activated, the program launched by this service is considered as a daemon process.</p> <ol> <li>Create a service file in path <code>/lib/systemd/system/&lt;service_name&gt;.service</code>, which can very depending on the Linux distribution you are using. This is proven to work on both Ubuntu and Raspbian.     <pre><code>sudo touch /lib/systemd/system/test_service.service\n</code></pre></li> <li>Open the file in a text editor and add the following content:     <pre><code>[Unit]\nDescription=This is a test service for demonstration\nAfter=multi-user.target     # When the service should be started\nStartLimitIntervalSec=0     # Interval to wait before restarting a service when it fails (return code is non-zero)\n\n[Service]\nUser=&lt;your_account_name&gt;    # Which account to run the service under, if not specified, it will run under root\nType=simple                 # Type of service, simple is the most common option for one-off tasks\nKillMode=mixed              # How to kill the service, mixed is used to kill all associated processes (including child processes)\n#TimeoutSec=60              # How long to wait before considering the service as failed and killing it, now disabled, set to 60 seconds\n#ExecStartPre=/bin/sleep 5  # Command to run before the main command, now disabled, set to sleep for 5 seconds\nExecStart=/usr/bin/python3 /home/test.py    # Command to run, in this case, it is a python script\n\n[Install]\nWantedBy=multi-user.target  # Which case the service should be started, in this case, all account will trigger the service\n</code></pre></li> </ol> <p>If you want to know more about the options in the service file, you can search for them in various Linux documentation websites.</p>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#step-2-activate-the-service","title":"Step 2: Activate the Service","text":"<ol> <li>Make systemd reload the service files.     <pre><code>sudo systemctl daemon-reload\n</code></pre></li> <li>Enable the service to start on boot. Change following command to your service name.     <pre><code>sudo systemctl enable test_service.service\n</code></pre></li> <li>Start the service now.     <pre><code>sudo systemctl start test_service.service\n</code></pre></li> <li>Check the status of the service.     <pre><code>sudo systemctl status test_service.service\n</code></pre></li> <li>(optional) Check the log of the service.     <pre><code>sudo journalctl -u test_service.service\n</code></pre></li> <li>(optional) Stop the service.     <pre><code>sudo systemctl stop test_service.service\n</code></pre></li> <li>(optional) Disable the service from starting on boot.     <pre><code>sudo systemctl disable test_service.service\n</code></pre></li> </ol>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#step-3-optional-routine-execution","title":"Step 3: (optional) Routine Execution","text":"<p>In this step, let's create a timer service that will routinely trigger our service, which in turn will launch our program.</p> <ol> <li>Create a service file in path <code>/lib/systemd/system/&lt;service_name&gt;.timer</code>, which can very depending on the Linux distribution you are using. This is proven to work on both Ubuntu and Raspbian.     <pre><code>sudo touch /lib/systemd/system/test_service.timer\n</code></pre></li> <li>Open the file in a text editor and add the following content:     <pre><code>[Unit]\nDescription=This is a test service for demonstration\n\n[Service]\nOnCalendar=hourly           # How often to trigger the service, in this case, hourly\n#OnBootSec=1m               # How long to wait before triggering the service after boot, now disabled, set to 1 minute\n#OnUnitActiveSec=1m         # How long to wait before re-triggering the service after previous launch, now disabled, set to 1 minute\nUnit=test_service.service   # Which service to trigger\nRemainAfterElapse=no        # Whether to keep this timer service active after it triggers the target service\n\n[Install]\nWantedBy=timers.target      # Which case the service should be started, in this case, by timers.target\n</code></pre></li> <li>Follow the same steps as in Step 2 to activate the timer service.</li> </ol>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#step-4-optional-write-a-script-to-automatically-finish-all-the-steps","title":"Step 4: (optional) Write a Script to Automatically Finish All the Steps","text":"<p>You can modify the following script to your needs while following the Provided License.</p> <ol> <li>schedule_routine.sh: This is another script that will setup a <code>update_task.timer</code> to routinely trigger the <code>update_task.sh</code> to execute a custom script <code>update_task.sh</code> after system boot.</li> </ol>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#solution-2-desktop-entry","title":"Solution 2: Desktop Entry","text":"<p>This solution is preferred for GUI applications, as it will launch the application in the user's desktop environment. Also, it is a lot easier to setup compared to systemd.</p>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#step-1-create-a-desktop-entry-file","title":"Step 1: Create a Desktop Entry File","text":"<ol> <li>Create a desktop entry file in path <code>$HOME/.config/autosart/&lt;app_name&gt;.desktop</code>:     <pre><code>touch $HOME/.config/autostart/test.desktop\n</code></pre></li> <li>Open the file in a text editor and add the following content:     <pre><code>[Desktop Entry]\nType=Application\nVersion=1.0\nName=Test\nComment=This is a test entry to launch a script on boot\nExec=/bin/bash /opt/boot_trigger.sh\nStartupNotify=false\nTerminal=true               # This is set to true to launch the script in a terminal window\n</code></pre></li> <li>Create the script that you want to launch in path <code>/opt/boot_trigger.sh</code>:     <pre><code>touch /opt/boot_trigger.sh\necho -e \"\\\n#!/bin/bash\\n\\\ngnome-terminal\\n\\\nsleep infinity # This is to keep the original terminal open for debugging\\n\\\n\" &gt; /opt/boot_trigger.sh\n</code></pre></li> </ol> <p>Next time you boot up your system, you will see a terminal window pop up automatically.</p>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#step-2-optional-write-a-script-to-automatically-finish-the-step","title":"Step 2: (optional) Write a Script to Automatically Finish the Step","text":"<p>You can modify the following script to your needs while following the Provided License.</p> <ol> <li>schedule_startup.sh: This is a script that will setup a <code>update_task.service</code> to execute a custom script <code>update_task.sh</code> after system boot.</li> </ol>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#references","title":"References","text":"<ol> <li>https://systemd.io/</li> <li>YouTube - ByteByteGo - How Does Linux Boot Process Work?</li> <li>https://unix.stackexchange.com/questions/48203/run-script-once-a-day-with-systemd</li> <li>https://www.freedesktop.org/software/systemd/man/latest/systemd.timer.html</li> <li>https://www.reddit.com/r/Fedora/comments/o1s94a/systemdissue_launch_gnome_terminal_startup/</li> <li>https://unix.stackexchange.com/questions/319341/how-do-i-debug-a-desktop-file</li> </ol>"},{"location":"HOW_TO/how_to_LINUX-auto_launch_program_on_boot/#error-correction","title":"Error Correction","text":"<p>If you find any mistakes in the document, please create an Issue or a Pull request or leave a message in Discussions or send me a mail directly with the mail icon at the bottom right. Thank you!</p>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/","title":"Create Standard Reference with BibTeX","text":"<p>This guide will show you how to create a standard reference word style with BibTeX and showcase with Institute of Electrical and Electronics Engineers (IEEE) format.</p>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#problem","title":"Problem","text":"<p>When writing a paper, you want to have the correct format of reference in the paper.</p>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#background","title":"Background","text":"<p>BibTeX is a file format aims to help with managing references in LaTeX documents, and is frequently used in academic writing. It is sort of like JSON format, acting as the standard format to be easily converted into other reference formats.</p> <p>BibTeX file has the following structure: (filename with \".bib\" extension)</p> <pre><code>@entry_type{citation_key,\n    field1 = {value1},\n    field2 = {value2},\n    fieldn = {valuen}\n    }\n</code></pre> <p>Indentation is not necessary, but it is recommended for readability.</p>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#solution","title":"Solution","text":""},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#step-1-create-a-bibtex-file","title":"Step 1: Create a BibTeX file","text":"<ol> <li>Create a new file with \".bib\" extension, e.g. \"reference.bib\":     Linux Bash<pre><code>touch reference.bib\n</code></pre> Windows PowerShell<pre><code>New-Item reference.bib\n</code></pre></li> <li>Copy BibTeX from website:<ol> <li>IEEE Xplore:<ol> <li>Find the paper you want to cite.</li> <li>Click \"Cite This\" and select \"BibTeX\".</li> <li>Click \"Copy\" and paste it into the \".bib\" file.</li> </ol> </li> <li>Research Gate:<ol> <li>Find the paper you want to cite.</li> <li>Click \"Download citation\".</li> <li>Select \"BibTeX\" from \"What type of file do you want?\".</li> <li>Click \"Copy to clipboard\" and paste it into the \".bib\" file.</li> </ol> </li> <li>Other websites:<ol> <li>Find the paper you want to cite.</li> <li>Look for citation options. If none, you can manually create the BibTeX entry.</li> </ol> </li> </ol> </li> <li>Example of frequent types of BibTeX entries: Website Reference<pre><code>@misc{tpm12,\n    title = {{TPM} Main Specification version 1.2},\n    howpublished = {\\url{https://trustedcomputinggroup.org/resource/tpm-main-specification/}},\n    author = {Trusted Computing Group},\n    year = {2004},\n    note = {Accessed: 2024-04-01}}\n</code></pre> IEEE Xplore Reference<pre><code>@INPROCEEDINGS{5368926,\n    author={Qingyu, Ou and Fang, Luo and Kai, Huang},\n    booktitle={2009 International Conference on Multimedia Information Networking and Security}, \n    title={High-Security System Primitive for Embedded Systems}, \n    year={2009},\n    volume={2},\n    number={},\n    pages={319-321},\n    keywords={Embedded system;Computer security;Information security;Reliability engineering;Programmable logic arrays;Programmable logic devices;Automatic control;Control systems;Embedded computing;Hardware;secure embedded;TrustZone;TPM;Programmable Logic},\n    doi={10.1109/MINES.2009.48}}\n</code></pre> Research Gate Reference<pre><code>@inproceedings{ima,\n    author = {Sailer, Reiner and Zhang, Xiaolan and Jaeger, Trent and van Doorn, Leendert},\n    year = {2004},\n    month = {01},\n    pages = {223-238},\n    title = {Design and Implementation of a TCG-based Integrity Measurement Architecture.}}\n</code></pre> Article<pre><code>@article{8274922,\n    author={Meng, Weizhi and Tischhauser, Elmar Wolfgang and Wang, Qingju and Wang, Yu and Han, Jinguang},\n    journal={IEEE Access}, \n    title={When Intrusion Detection Meets Blockchain Technology: A Review}, \n    note={\\href{https://ieeexplore.ieee.org/document/8274922}{https://ieeexplore.ieee.org/document/8274922}},\n    year={2018},\n    volume={6},\n    number={},\n    pages={10179-10188},\n    doi={10.1109/ACCESS.2018.2799854}}\n</code></pre> Techreport<pre><code>@techreport{McAfee_next_gen_IDS,\n    author={Fengmin Gong},\n    title={McAfee Network Security Platform: The Next-Generation Network IPS},\n    note={\\href{http://www.webtorials.com/main/resource/papers/McAfee/paper3/next-generation-network-ips.pdf}{http://www.webtorials.com/main/resource/papers/McAfee/paper3/next-generation-network-ips.pdf}},\n    year={2003},\n    address={San Jose, 6220 America Center Drive, United States},\n    organization={McAfee Network Security Platform}}\n</code></pre>     If more fields or typees are needed, you can visit https://bibtex.eu/ for more information.</li> <li>Format special cases:<ol> <li>Traditional chinese authors' names should be written in the format \"Firstname Lastname\" with no comma in between, e.g. <code>author={&lt;firstname1&gt; &lt;lastname1&gt; and &lt;firstname2&gt; &lt;lastname2&gt; and &lt;firstname3&gt; &lt;lastname3&gt;}</code></li> <li>If you want to prevent title or author from being shortened/processed, you can use curly braces to wrap the text, e.g. <code>title={{This is a long title THAT wON't be FORMATED}}</code>.</li> <li>If your referencing material haven't been published yet or any other situation, you can use <code>year</code> field to indicate the year of the material, e.g. <code>year={in press}</code>.</li> </ol> </li> <li>Example of final form of your \".bib\" file can be found in my GitHub.</li> </ol>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#step-2-option-1-use-latex-template","title":"Step 2 Option 1: Use LaTeX template","text":"<p>If your publisher provides a LaTeX template, you can use it to generate the absolute correct format of the reference. Following steps will use IEEE conference template as example:</p> <ol> <li>Download the IEEE conference template from the website.</li> <li>Extract the zip file and find the <code>.tex</code> file. Open it with a text editor, in my case, I use TeXworks. (after installing miktex, you will have TeXworks installed)</li> <li>Copy your BibTeX file into the same folder as the <code>.tex</code> file.</li> <li>Remove content after <code>\\section{Introduction}</code> and before <code>\\end{document}</code> to make it a clean template.</li> <li>Add following two lines before <code>\\end{document}</code> to include BibTeX file:     <pre><code>\\bibliographystyle{IEEEtran}  \n\\bibliography{&lt;bibtex_filename&gt;}\n</code></pre></li> <li>Use <code>\\cite{&lt;citation_key&gt;}</code> to cite at least one reference in the <code>.tex</code> file after <code>\\section{Introduction}</code> and before <code>\\bibliographystyle{IEEEtran}</code>.</li> <li>Escape special characters in the BibTeX file, e.g. <code>_</code> should be written as <code>\\_</code>.</li> <li>Compile the <code>.tex</code> file, and you will see the reference list at the end of the paper.</li> <li>If you are using MS Word, you can copy from the PDF file and paste it into your Word document.</li> <li>Results: (can compile)<ul> <li>Following is an example of the final form of your \".tex\" file: Download conference_101719.tex</li> </ul> Code in conference_101719.tex <pre><code>\\documentclass[conference]{IEEEtran}\n\\IEEEoverridecommandlockouts\n% The preceding line is only needed to identify funding in the first footnote. If that is unneeded, please comment it out.\n\\usepackage{cite}\n\\usepackage{amsmath,amssymb,amsfonts}\n\\usepackage{algorithmic}\n\\usepackage{graphicx}\n\\usepackage{textcomp}\n\\usepackage{xcolor}\n\\def\\BibTeX{{\\rm B\\kern-.05em{\\sc i\\kern-.025em b}\\kern-.08em\n    T\\kern-.1667em\\lower.7ex\\hbox{E}\\kern-.125emX}}\n\\begin{document}\n\n\\title{Conference Paper Title*\\\\\n{\\footnotesize \\textsuperscript{*}Note: Sub-titles are not captured in Xplore and\nshould not be used}\n\\thanks{Identify applicable funding agency here. If none, delete this.}\n}\n\n\\author{\\IEEEauthorblockN{1\\textsuperscript{st} Given Name Surname}\n\\IEEEauthorblockA{\\textit{dept. name of organization (of Aff.)} \\\\\n\\textit{name of organization (of Aff.)}\\\\\nCity, Country \\\\\nemail address or ORCID}\n\\and\n\\IEEEauthorblockN{2\\textsuperscript{nd} Given Name Surname}\n\\IEEEauthorblockA{\\textit{dept. name of organization (of Aff.)} \\\\\n\\textit{name of organization (of Aff.)}\\\\\nCity, Country \\\\\nemail address or ORCID}\n\\and\n\\IEEEauthorblockN{3\\textsuperscript{rd} Given Name Surname}\n\\IEEEauthorblockA{\\textit{dept. name of organization (of Aff.)} \\\\\n\\textit{name of organization (of Aff.)}\\\\\nCity, Country \\\\\nemail address or ORCID}\n\\and\n\\IEEEauthorblockN{4\\textsuperscript{th} Given Name Surname}\n\\IEEEauthorblockA{\\textit{dept. name of organization (of Aff.)} \\\\\n\\textit{name of organization (of Aff.)}\\\\\nCity, Country \\\\\nemail address or ORCID}\n\\and\n\\IEEEauthorblockN{5\\textsuperscript{th} Given Name Surname}\n\\IEEEauthorblockA{\\textit{dept. name of organization (of Aff.)} \\\\\n\\textit{name of organization (of Aff.)}\\\\\nCity, Country \\\\\nemail address or ORCID}\n\\and\n\\IEEEauthorblockN{6\\textsuperscript{th} Given Name Surname}\n\\IEEEauthorblockA{\\textit{dept. name of organization (of Aff.)} \\\\\n\\textit{name of organization (of Aff.)}\\\\\nCity, Country \\\\\nemail address or ORCID}\n}\n\n\\maketitle\n\n\\begin{abstract}\nThis document is a model and instructions for \\LaTeX.\nThis and the IEEEtran.cls file define the components of your paper [title, text, heads, etc.]. *CRITICAL: Do Not Use Symbols, Special Characters, Footnotes, \nor Math in Paper Title or Abstract.\n\\end{abstract}\n\n\\begin{IEEEkeywords}\ncomponent, formatting, style, styling, insert\n\\end{IEEEkeywords}\n\n\\section{Introduction}\n\n\\cite{tpm12}\n\\cite{ima}\n\\cite{tpm20}\n\\cite{5234829}\n\n\\bibliographystyle{IEEEtran}  \n\\bibliography{reference}\n\n\\end{document}\n</code></pre> <ul> <li>Following is an example of the final form of your \".bib\" file: Download reference.bib</li> </ul> Code in reference.bib <pre><code>@misc{tpm12,\n    title = {TPM Main Specification version 1.2},\n    howpublished = {\\url{https://trustedcomputinggroup.org/resource/tpm-main-specification/}},\n    author = {{Trusted Computing Group}},\n    year = {2004},\n    note = {Accessed: 2024-04-01}}\n\n@misc{tpm20,\n    title = {TPM 2.0 Library Specification},\n    howpublished = {\\url{https://trustedcomputinggroup.org/resource/tpm-library-specification/}},\n    author = {{Trusted Computing Group}},\n    year = {2014},\n    note = {Accessed: 2024-04-01}}\n\n@inproceedings{ima,\n    author = {Sailer, Reiner and Zhang, Xiaolan and Jaeger, Trent and van Doorn, Leendert},\n    year = {2004},\n    month = {01},\n    pages = {223-238},\n    title = {Design and Implementation of a TCG-based Integrity Measurement Architecture.}}\n\n@INPROCEEDINGS{5234829,\n  author={Weiwei Fang and Changsheng Zhou and Ying Zhang and Liang Zhang},\n  booktitle={2009 2nd IEEE International Conference on Computer Science and Information Technology}, \n  title={Research and application of trusted computing platform based on portable TPM}, \n  year={2009},\n  volume={},\n  number={},\n  pages={506-509},\n  keywords={Computer applications;Portable computers;Protection;Information security;Data security;Random number generation;Information science;Hardware;Cryptography;Computer industry;trusted computing;trusted root;trusted chain;TPM;TSS},\n  doi={10.1109/ICCSIT.2009.5234829}}\n</code></pre> <ul> <li>Compiled PDF: See conference_101719.pdf</li> <li>ZIP of this example project: Download bibtex_option1.zip</li> </ul> </li> </ol>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#step-2-option-2-conversion-online","title":"Step 2 Option 2: Conversion Online.","text":"<p>Note: This method doesn't guarantee the correct format of the reference. You need to verify it with the template provided by the conference or journal.</p> <p>There are many online tools that can convert BibTeX file into your desired format. In this case, we will use IEEE format.</p> <ol> <li>Go to BibTeX to IEEE converter.</li> <li>Click \"Choose BibTeX file...\" and select your BibTeX file.</li> <li>Click \"\\(\\rightarrow\\) Convert\" and download the converted file in \"Word\" format.</li> <li>Now you can copy and paste the references into your paper.</li> </ol> <p> Figure 1: BibTeX to IEEE converter.</p>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#step-2-option-3-use-in-latex-general-method","title":"Step 2 Option 3: Use in LaTeX (general method)","text":"<ol> <li>Before using citations in LaTeX, you need to set document class and include additional setting in your \"./tex\" file:     <pre><code>\\documentclass{report}\n\\renewcommand{\\bibname}{References}\n</code></pre></li> <li>When you want to cite a reference in your paper, you can use the citation key to refer to the reference:     <pre><code>Paper \\cite{citation_key} is a good paper.\n</code></pre>     The LaTeX engine will automatically generate reference numbers in the paper like \"[1]\" in the correct order.</li> <li>When you want to list out all the references at the end of the paper, you can use the following command:     <pre><code>\\bibliography{&lt;bibtex_filename&gt;}\n\\bibliographystyle{&lt;style}\n</code></pre></li> <li>Example of final form of your \".tex\" file can be found in my GitHub.</li> <li>(optional) If you are looking for a LaTeX compiling script on Windows, you can check the following ones:<ol> <li>auto-compile.ps1</li> <li>md_gen_pdf.ps1</li> <li>md_gen_pdf2.ps1 Or you can use the compiler in your LaTeX editor.</li> </ol> </li> </ol>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#step-3-re-check","title":"Step 3: Re-Check","text":"<p>All conferences and journals should have provided a template for you to use. Make sure to verify the format of the reference with the template. If no template is provided, you can always use previous published papers to verify.</p>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#reference","title":"Reference","text":"<ol> <li>https://www.bibtex.org/</li> <li>https://bibtex.eu/</li> <li>https://tex.stackexchange.com/questions/99404/using-references-to-a-bib-file-when-using-ieeetran</li> </ol>"},{"location":"HOW_TO/how_to_PAPER-create_standard_reference_with_bibtex/#error-correction","title":"Error Correction","text":"<p>If you find any mistakes in the document, please create an Issue or a Pull request or leave a message in Discussions or send me a mail directly with the mail icon at the bottom right. Thank you!</p>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/","title":"Multiprocessing to Parrallel and Speed Up","text":"<p>This guide will show you how to enable multiprocessing to speed up your Python program.</p>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#problem","title":"Problem","text":"<p>You have a Python program that takes a long time to run and is performing CPU-bound (math, data processing, etc.), none I/O-bound (network, disk, etc.) tasks. You want to speed up the program by making it work in parallel.</p>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#background","title":"Background","text":"<p>Note:</p> <ol> <li>Not all libraries support multiprocessing.</li> <li>This guide assumes you are familiar with Python and have a basic understanding of CPU and memory usage.</li> <li>Tasks that are CPU-bound can be sped up by this.</li> <li>Tasks that are I/O-bound can be sped up by using threading.</li> <li>Tasks are independent of each other. (next task does not depend on the previous task's result)</li> </ol> <p>The idea of multi-processing is to use multiple CPU-cores (1 core per process) to run multiple independent tasks at the same time. This is different from multi-threading, which uses multiple threads (1 core multiple tasks) to share CPU resources when independent tasks take a lot of time waiting for external triggers (network request, GPIO input, time) by idling.</p> <p>Each newly created processes will have its own memory space without sharing memory with the parent process. Therefore, data sharing between processes and the parent process is not as easy as sharing data between threads. Methods like spawning with input argument, and <code>multiprocessing.Queue</code> can be used.</p> <p>A example of using multiprocessing to speed up network package (pcap) processing can be found in my GitHub.</p>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#solution","title":"Solution","text":""},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#step-1-make-sure-to-have-sufficent-resources","title":"Step 1: Make Sure to have Sufficent Resources","text":"<ol> <li>CPU: The more cores you have, the more tasks you can run in parallel.<ul> <li>If you are using Windows, you can check Task Manager to see how many cores you have.</li> <li>If you are using Linux, you can use tools like <code>htop</code>, <code>top</code>, or <code>echo $(nproc)</code> to see how many cores you have.</li> <li>If you want to check with Python code, you can use the following code:     <pre><code>import os\nprint(os.cpu_count())\n</code></pre></li> </ul> </li> <li>Memory: Make sure you have enough memory to run multiple tasks at the same time. You can approximate the memory usage by multiplying the memory usage of one task by the number of tasks you want to run in parallel.<ul> <li>If you are using Windows, you can check Task Manager to see how much memory you have.</li> <li>If you are using Linux, you can use tools like <code>htop</code>, <code>top</code>, or <code>free -h</code> to see how much memory you have.</li> </ul> </li> </ol>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#step-2-use-the-multiprocessing-library","title":"Step 2: Use the <code>multiprocessing</code> Library","text":"<ul> <li>Using <code>multiprocessing.Pool</code>:     code<pre><code>import multiprocessing as mp\nimport time\nimport os\n\ndef new_process(required_iterable_item):\n    time.sleep(1)\n    print(f\"Time: {time.time():.2f} | Process ID: {os.getpid()} | Process Name: {mp.current_process().name}\")\n\nif __name__ == '__main__':\n    mp.freeze_support()\n    cpu_count = 4 #os.cpu_count()\n    with mp.Pool(processes=cpu_count) as p:\n        p.map(func=new_process, iterable=range(cpu_count))\n</code></pre> code output<pre><code>Time: 1713118619.71 | Process ID: 16624 | Process Name: SpawnPoolWorker-1\nTime: 1713118619.71 | Process ID: 12120 | Process Name: SpawnPoolWorker-2\nTime: 1713118619.71 | Process ID: 7640 | Process Name: SpawnPoolWorker-3\nTime: 1713118619.72 | Process ID: 4232 | Process Name: SpawnPoolWorker-4\n</code></pre>     This method is useful when you have a list of tasks (more than CPU core count) to run in parallel. The <code>Pool</code> class will automatically launch processes when a core is available.</li> <li>Using <code>multiprocessing.Process</code>:     code<pre><code>import multiprocessing as mp\nimport time\nimport os\n\ndef new_process(process_id):\n    time.sleep(1)\n    print(f\"Time: {time.time():.2f} | Process ID: {os.getpid()} | Process Name: {mp.current_process().name}\")\n\nif __name__ == '__main__':\n    mp.freeze_support()\n    cpu_count = 4 #os.cpu_count()\n    for i in range(cpu_count):\n        p = mp.Process(target=new_process, args=(i,))\n        p.start() # Control when the process starts\n        # p.join() # Halts the main process until the child process is done\n</code></pre> code output<pre><code>Time: 1713118698.65 | Process ID: 8864 | Process Name: Process-1\nTime: 1713118698.66 | Process ID: 17096 | Process Name: Process-2\nTime: 1713118698.66 | Process ID: 5608 | Process Name: Process-3\nTime: 1713118698.66 | Process ID: 10104 | Process Name: Process-4\n</code></pre>     This method is useful when you want to manually control the number of processes to run in parallel. After each process is created, you can call <code>process.start()</code> to start the process and <code>process.join()</code> to wait for the process to finish.</li> </ul> <p>Note:</p> <ol> <li><code>if __name__ == '__main__':</code> in line <code>8</code> is required to prevent infinite recursion when creating new processes. This is because the new processes will import the main module again, and the <code>if __name__ == '__main__':</code> block will prevent the new processes from running the code inside the block.</li> <li><code>multiprocessing.freeze_support()</code> in line <code>9</code> is recommended to be called after the <code>if __name__ == '__main__':</code> block to allow the program.</li> <li>Format whatever process you want to run into a function for both methods. In this case, <code>new_process</code> in line <code>4</code> is the function that runs in parallel, can you can see they all stops at the same time instead of executing linearly.</li> </ol>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#step-3-send-parent-process-data-to-child-process","title":"Step 3: Send Parent Process Data to Child Process","text":"<p>For the following example, we will only use <code>multiprocessing.Pool</code> method. It is interchangable with <code>multiprocessing.Process</code> method.</p> <p>code<pre><code>import multiprocessing as mp\nimport time\n\ndef new_process(input_data):\n    time.sleep(1)\n    idx_start, idx_end = input_data\n    print(f\"Time: {time.time():.2f} | Start: {idx_start} | End: {idx_end}\")\n\nif __name__ == '__main__':\n    mp.freeze_support()\n    cpu_count = 4 #os.cpu_count()\n\n    # Create a list of input data\n    increment = 1\n    input_data = [(i*increment, (i+1)*increment) for i in range(cpu_count)]\n\n    with mp.Pool(processes=cpu_count) as p:\n        p.map(func=new_process, iterable=input_data)\n</code></pre> code output<pre><code>Time: 1713111614.02 | Start: 0 | End: 1\nTime: 1713111614.02 | Start: 1 | End: 2\nTime: 1713111614.02 | Start: 2 | End: 3\nTime: 1713111614.02 | Start: 3 | End: 4\n</code></pre></p> <ul> <li>Line <code>14-15</code>: Create a list of tuples containing different arguments for the function.</li> <li>Line <code>18</code>: Spawn a pool of processes with independent input arguments.</li> <li>Line <code>6</code>: Unpack the tuple to retrieve the arguments.</li> </ul> <p>You can see from the output that the parent process sends different arguments to the child process, and the child process receives the arguments correctly and prints them out.</p>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#step-4-return-child-process-data-to-parent-process-with-multiprocessingmanager","title":"Step 4: Return Child Process Data to Parent Process with <code>multiprocessing.Manager</code>","text":"<p>For the following example, we will only use <code>multiprocessing.Pool</code> method and use <code>multiprocessing.Manager().dict()</code> to create a shared memory space between the parent and child processes.</p> <p>With this method, child processes can also read and write to the shared memory space, which is useful when different child processes are responsible for different tasks and need to share data with themselves.</p> <p>code<pre><code>import multiprocessing as mp\nimport time\nimport collections\n\ndef new_process(input_data):\n    time.sleep(1)\n    idx_start, idx_end, return_dict = input_data\n    calculation_result = idx_start + idx_end\n    print(f\"Time: {time.time():.2f} | Start: {idx_start} | End: {idx_end} | Result: {calculation_result}\")\n    return_dict[idx_start] = calculation_result\n\nif __name__ == '__main__':\n    mp.freeze_support()\n    cpu_count = 4 #os.cpu_count()\n    manager = mp.Manager()\n    return_dict = manager.dict()\n\n    # Create a list of input data\n    increment = 1\n    input_data = [(i*increment, (i+1)*increment, return_dict) for i in range(cpu_count)]\n\n    with mp.Pool(processes=cpu_count) as p:\n        p.map(func=new_process, iterable=input_data)\n    print(f\"Return Dict: {return_dict}\")\n\n    return_dict = collections.OrderedDict(sorted(return_dict.items()))\n    print(f\"Ordered Dict: {return_dict}\")\n\n    final_arr = []\n    for key, value in return_dict.items():\n        #print(f\"Key: {key} / Value: {value}\")\n        final_arr.append(value)\n    print(f\"Final Array: {final_arr}\")\n</code></pre> code output<pre><code>Time: 1713112527.44 | Start: 1 | End: 2 | Result: 3\nTime: 1713112527.44 | Start: 0 | End: 1 | Result: 1\nTime: 1713112527.44 | Start: 2 | End: 3 | Result: 5\nTime: 1713112527.44 | Start: 3 | End: 4 | Result: 7\nReturn Dict: {1: 3, 0: 1, 2: 5, 3: 7}\nOrdered Dict: OrderedDict({0: 1, 1: 3, 2: 5, 3: 7})\nFinal Array: [1, 3, 5, 7]\n</code></pre></p> <ul> <li>Line <code>15-16</code>: Use <code>multiprocessing.Manager().dict()</code> to create a shared dictionary between the parent and child processes. In this case, child processes write to the dictionary, and the parent process read from the dictionary, this process is bi-directional.</li> <li>Line <code>20</code>: Add the shared dictionary to the input arguments.</li> <li>Line <code>8</code>: Perform some kind of operation in the child process.</li> <li>Line <code>10</code>: Write the result to the shared dictionary with <code>idx_start</code> as the key. This helps to keep track of the order of the results.</li> <li>Line <code>24</code>: Read the shared dictionary populated by the child processes.</li> <li>Line <code>26-27</code>: Order the dictionary by key and print the result, since child processes write to the dictionary once they finish, the order of the dictionary is not guaranteed. Depending on your use case, this step is optional.</li> <li>Line <code>29-33</code>: Retrieve data from shared dictionary as a list and print the result.</li> </ul>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#step-5-share-data-between-parent-and-child-processes-with-multiprocessingqueue","title":"Step 5: Share Data Between Parent and Child Processes with <code>multiprocessing.Queue</code>","text":"<p>For the following example, we will only use <code>multiprocessing.Pool</code> method and use <code>multiprocessing.Queue()</code> to create a shared memory space between the parent and child processes.</p> <p>With this method, child processes can also read and write to the shared memory space, which is useful when different child processes are responsible for different tasks and need to share data with themselves.</p> <p>Before using this, you need to know that a queue is a First-In-First-Out (FIFO) data structure, which means that the first element added to the queue will be the first element removed from the queue. Following are the common method for queue</p> <ul> <li><code>put()</code>: Add an item to the queue. (at the end, last one to be removed)</li> <li><code>get()</code>: Remove and return an item from the queue. (from the front, the oldest one)</li> </ul> <p>code<pre><code>import multiprocessing as mp\nimport time\nimport os\n\ndef worker_main(input_queue, output_queue):\n    print(f\"Time: {time.time():.2f} | Process ID: {os.getpid()} | working\")\n    while True:\n        item = input_queue.get()\n        print(f\"Time: {time.time():.2f} | Process ID: {os.getpid()} | Received: {item}\")\n        time.sleep(1) # simulate a \"long\" operation\n        calculation_result = item[\"idx_start\"] + item[\"idx_end\"]\n        item[\"result\"] = calculation_result\n        item[\"status\"] = \"done\"\n        output_queue.put(item)\n        print(f\"Time: {time.time():.2f} | Process ID: {os.getpid()} | Result: {calculation_result}\")\n\nif __name__ == '__main__':\n    mp.freeze_support()\n    cpu_count = 4 #os.cpu_count()\n    input_queue = mp.Queue()\n    output_queue = mp.Queue()\n\n    the_pool = mp.Pool(processes=cpu_count, initializer=worker_main, initargs=(input_queue, output_queue))\n\n    increment = 1\n    for i in range(cpu_count*2):\n        data = {}\n        data[\"status\"] = \"new\"\n        data[\"idx_start\"] = i\n        data[\"idx_end\"] = (i+1)*increment\n        input_queue.put(data)\n\n    while (output_queue.qsize() &lt; cpu_count*2):\n        time.sleep(1)\n\n    results = []\n    while not output_queue.empty():\n        item = output_queue.get()\n        results.append(item)\n    print(f\"Time: {time.time():.2f} | Results: {results}\")\n</code></pre> code output<pre><code>Time: 1713117240.12 | Process ID: 16284 | working\nTime: 1713117240.12 | Process ID: 16284 | Received: {'status': 'new', 'idx_start': 0, 'idx_end': 1}\nTime: 1713117240.12 | Process ID: 3852 | working\nTime: 1713117240.12 | Process ID: 3852 | Received: {'status': 'new', 'idx_start': 1, 'idx_end': 2}\nTime: 1713117240.12 | Process ID: 16912 | working\nTime: 1713117240.12 | Process ID: 16912 | Received: {'status': 'new', 'idx_start': 2, 'idx_end': 3}\nTime: 1713117240.12 | Process ID: 884 | working\nTime: 1713117240.12 | Process ID: 884 | Received: {'status': 'new', 'idx_start': 3, 'idx_end': 4}\nTime: 1713117241.12 | Process ID: 16284 | Result: 1\nTime: 1713117241.12 | Process ID: 16284 | Received: {'status': 'new', 'idx_start': 4, 'idx_end': 5}\nTime: 1713117241.12 | Process ID: 3852 | Result: 3\nTime: 1713117241.12 | Process ID: 3852 | Received: {'status': 'new', 'idx_start': 5, 'idx_end': 6}\nTime: 1713117241.12 | Process ID: 16912 | Result: 5\nTime: 1713117241.12 | Process ID: 16912 | Received: {'status': 'new', 'idx_start': 6, 'idx_end': 7}\nTime: 1713117241.13 | Process ID: 884 | Result: 7\nTime: 1713117241.13 | Process ID: 884 | Received: {'status': 'new', 'idx_start': 7, 'idx_end': 8}\nTime: 1713117242.12 | Process ID: 16284 | Result: 9\nTime: 1713117242.12 | Process ID: 3852 | Result: 11\nTime: 1713117242.12 | Process ID: 16912 | Result: 13\nTime: 1713117242.13 | Process ID: 884 | Result: 15\nTime: 1713117242.96 | Results: [{'status': 'done', 'idx_start': 0, 'idx_end': 1, 'result': 1}, {'status': 'done', 'idx_start': 1, 'idx_end': 2, 'result': 3}, {'status': 'done', 'idx_start': 2, 'idx_end': 3, 'result': 5}, {'status': 'done', 'idx_start': 3, 'idx_end': 4, 'result': 7}, {'status': 'done', 'idx_start': 4, 'idx_end': 5, 'result': 9}, {'status': 'done', 'idx_start': 5, 'idx_end': 6, 'result': 11}, {'status': 'done', 'idx_start': 6, 'idx_end': 7, 'result': 13}, {'status': 'done', 'idx_start': 7, 'idx_end': 8, 'result': 15}]\n</code></pre></p> <ul> <li>Line <code>20-21</code>: Create a queue to let parent send data to child processes, and another queue to let child processes send data back to the parent.</li> <li>Line <code>23</code>: Spawn a pool of processes and expose the queues to the child processes. Note that these processes will be reused for different tasks.</li> <li>Line <code>31</code>: Put the data into the queue to send to the child processes. The data can be any Python object, I use a dictionary for this example.</li> <li>Line <code>8</code>: While the queue is not empty, get the data from the queue.</li> <li>Line <code>14</code>: After processing the data, put the result into another queue to send back to the parent process.</li> <li>Line <code>33-34</code>: Wait for all child processes to finish. Note that these processes are not terminated, and will execute till the end of the program. You can terminate them if you want.</li> <li>Line <code>36-39</code>: Get the result from the queue.</li> </ul> <p>This method is useful when each child process requires relaively small amount of time to process or you do not have sufficient memory to store several copies of the data. Each child process will live until all data is processed and dynamically accepts new tasks passed by parent process.</p>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#reference","title":"Reference","text":"<ol> <li>https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing</li> <li>https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool</li> <li>https://docs.python.org/3/library/queue.html</li> <li>https://stackoverflow.com/questions/44660676/python-using-multiprocessing</li> <li>https://stackoverflow.com/questions/17241663/filling-a-queue-and-managing-multiprocessing-in-python</li> <li>https://stackoverflow.com/questions/11515944/how-to-use-multiprocessing-queue-in-python</li> <li>https://stackoverflow.com/questions/1540822/dumping-a-multiprocessing-queue-into-a-list</li> </ol>"},{"location":"HOW_TO/how_to_PYTHON-multiprocessing_to_parallel_and_speedup/#error-correction","title":"Error Correction","text":"<p>If you find any mistakes in the document, please create an Issue or a Pull request or leave a message in Discussions or send me a mail directly with the mail icon at the bottom right. Thank you!</p>"},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/","title":"Create Documentation Website with MkDocs","text":"<p>This guide will show you how to create a develop environment for a documentation website using MkDocs.</p>"},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/#problem","title":"Problem","text":"<p>You want to create a documentation website with MkDocs for documenting projects, APIs, or any other content.</p>"},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/#background","title":"Background","text":"<p>MkDocs generates websites from markdown files and can be accessed locally for rapid development and deployed to a web server (ex: GitHub Pages). It prevents the need to write HTML, CSS, and JS, and let developer focuses on only the documentation.</p>"},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/#solution","title":"Solution","text":""},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/#step-1-setup-mkdocs","title":"Step 1. Setup MkDocs","text":"<ol> <li>Install Python and pip.<ol> <li>In Windows, download Python from Python official website.</li> <li>In Linux, use corresponding package manager to install Python. Following is an example for Debian-based systems.     <pre><code>sudo apt install python3 python3-pip\n</code></pre></li> </ol> </li> <li>(optional, recommended) Create and activate a virtual environment.<ol> <li>In Windows, open Command Prompt, PowerShell, or PowerShell 7 and run the following command. You need to replace <code>Python312</code> with your installed version, and <code>cd</code> into your project directory before execution.     <pre><code>C:\\Python312\\python.exe -m venv venv\n.\\venv\\Scripts\\activate\n</code></pre></li> <li>In Linux, open Terminal and run the following command. You need to replace <code>python3.12</code> with your installed version, and <code>cd</code> into your project directory before execution.     <pre><code>python3.12 -m venv venv\nsource venv/bin/activate\n</code></pre></li> </ol> </li> <li>Install MkDocs.     <pre><code>pip install mkdocs mkdocs-material\n</code></pre></li> <li>(optional) Install MkDocs plugins like mkdocs-nav-weight <pre><code>pip install mkdocs-nav-weight\n</code></pre></li> <li>Initialize MkDocs project.     <pre><code>mkdocs new .\n</code></pre></li> <li>Serve website locally for development. You can access the website at <code>127.0.0.1:8000</code> with default settings in your browser.     <pre><code>mkdocs serve\n</code></pre></li> <li>After development, deploy your website to a web server.</li> </ol> <p>After project initialized, you can edit <code>mkdocs.yml</code> for configuration, and edit markdown files in <code>docs</code> directory for content. Markdown files will be pages, directory with <code>index.md</code> can hold subpages.</p>"},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/#step-2-development-routine","title":"Step 2. Development Routine","text":"<ol> <li>Serve website locally. You need to <code>cd</code> into your project directory before execution.     <pre><code>mkdocs serve\n</code></pre></li> <li>Edit markdown files in <code>docs</code> directory. MkDocs will automatically reload the website when files are modified.</li> </ol>"},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/#reference","title":"Reference","text":"<ol> <li>https://www.mkdocs.org/</li> <li>https://squidfunk.github.io/mkdocs-material/</li> <li>YouTube - James Willett - How to Create STUNNING Code Documentation With MkDocs Material Theme</li> </ol>"},{"location":"HOW_TO/how_to_WEBSITE-create_documentation_website_with_mkdocs/#error-correction","title":"Error Correction","text":"<p>If you find any mistakes in the document, please create an Issue or a Pull request or leave a message in Discussions or send me a mail directly with the mail icon at the bottom right. Thank you!</p>"}]}